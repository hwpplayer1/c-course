2024-08-10  hwpplayer1  <hwpplayer1@debian>

	* c-basic/C.pdf: Derleyicilerin Hata Mesajları
Derleyicilerin hata mesajları üçe ayrılmaktadır:
1. Uyarılar (Warnings): Uyarılar gerçek hatalar değildir. Program içerisindeki program yapmış olabileceği olası
mantık hatalarına dikkati çekmek için verilirler. Uyarılar derleme işleminin başarısızlığına yol açmazlar. Ancak
programcıların uyarılara çok dikkat etmesi gerekir. Çünkü pek çok uyarıda derleyici haklı bir yere dikkat
çekmektedir.
2. Gerçek Hatalar (Errors): Bunlar dilin sentaks ve semantik kurallarına uyulmaması yüzünden verilirler.
Bunların mutlaka düzeltilmesi gerekir. Bir programda bir tane bile “error” olsa program başarılı olarak derlenemez.
3. Ölümcül Hatalar (Fatal Errors): Dereleme işleminin bile devam etmesini engelleyen ciddi hatalardır. Normal
olarak bir programda ne kadar hata olursa olsun tüm kod gözden geçirilir. Tüm hatalar en sonında listelenir. Fakat
bir ölümcül hata oluştuğunda artık derleme işlemi sonlandırılır. Ölümcül hatalar genellikle sistemdeki ciddi
sorunlar yüzünden ortaya çıkmaktadır (örneğin diskte yeterli alan olmayabilir, ya da sistemde yeterli RAM
bulunmuyor olabilir.)
Verilen hata mesajlarının metinleri derleyiciden derleyiciye değişebilir. Ayrıca bir hata durumunda bir derleyici
buna birmesaj verirken diğeri daha fazla mesaj verebilir.
	* c-basic/C.pdf: Atom/Token kavramı sayfa 12

	* c-basic/C.pdf: sayfa 11 Bir C Programını Oluşturmak

	* c-basic/example.c (main): example örnek kod yazıldı .c uzantılı dosya içine kod yerleştirildi

	* c-basic/C.pdf: Dersler C Temel kursundan itibaren yeniden başlatıldı. 

2024-07-26  hwpplayer1  <hwpplayer1@debian>

	* c-basic/C.pdf: Fonksiyonların Parametre Değişkenleri page 27

	* c-basic/global_variable_2.c (main): global variable and local variable example

2024-07-17  hwpplayer1  <hwpplayer1@debian>

	* c-basic/C.pdf: Global Değişkenlerin Faaliyet Alanı sayfa 26

2024-07-16  hwpplayer1  <hwpplayer1@debian>

	* c-basic/C.pdf: Yerel Değişkenlerin Faaliyet Alanları  sayfa 25 

	* c-basic/C.pdf: Değişkenlerin Faaliyet Alanları (Scope) sayfa 24

2024-06-30  hwpplayer1  <hwpplayer1@debian>

	* c-basic/C.pdf: sayfa 22 Fonksiyonların Geri Dönüş Değerleri (return value)

	* c-basic/float_double.c: float double example

	* c-basic/hex_scanf.c: hex scanf example

	* c-basic/scanf_2.c: scanf two numbers

	* c-basic/scanf.c: Scanf example

	* c-basic/printf.c: printf example

	* c-basic/foo.c: Foo example

	* c-basic/helloworld.c: hello world example

2024-02-19  Mert Gör  <mertgor@masscollabs.xyz>

	* c-basic/C.pdf: Fonksiyonların Parametre Değişkenleri sayfa 27'deyiz

	* c-basic/global.variable.c: C'de  derleme  işleminin  bir  yönü  vardır.  Bu  yön  yukarıdan  aşağıya  doğrudur.  Derleyicinin  önce  değişkenin 
bildirimini görmesi gerekir. Bu nedenle bir global değişkeni aşağıda bildirip daha yukarıda kullanamayız. 

	* c-basic/local.variable.c: Bir global değişkenle aynı isimli yerel değişkenler tanımlanabilir. Çünkü bunlar farklı faaliyet alanlarına sahiptir. 
Tabi  ilgili  blokta  bu  değişken  ismi  kullanıldığında  dar  faaliyet  alanaına  sahip  olana  (yani  yerel  olana)  erişilir. 


	* c-basic/global.variable.scope.c: Bildirimleri fonksiyonların dışında yapılan değişkenlere global değişkenler denir. Global değişkenler dosya faaliyet 
alanına (file scope) sahiptir. Yani tüm fonksiyonlarda tanınırlar. 

	* c-basic/scope.example.c: C'de bir blokta bir'den fazla değişken faaliyet gösteriyorsa o blokta o değişken ismi kullanıldığında dar faaliyet 
alanına sahip olan değişkene erişilir. 

	* c-basic/global-local-variables.c: global and local variable scopes exmplained

	* c-basic/void.function.c: void fonksiyonlarda return kullanılmamışsa fonksiyon ana blok sonlanınca sonlanır. 

	* c-basic/return.2.c: return 0;    /* bu olmasaydı da aynı anlam oluşacaktı */ 

	* c-basic/return.c: return explained

	* c-basic/abc-double.c: İsmi a, b, c olan double türden 3 değişken tanımlayınız. Sonra a ve b için klavyeden scaf fonksiyonuyla okuma 
yapınız. Bu ikisinin toplamını c'ye atayınız ve c'yi yazdırınız.

	* c-basic/float-and-double.c: printf fonksiyonunda hem float hem de double türleri %f ile yazdırılır. Ancak scanf fonksiyonunda float %f ile, 
double %lf ile okunur. 

	* c-basic/scanf-example.hex.c: scanf ile %x ile okumak istersek klavyeden yaptığımız girişin 16'lık sistemde olduğu kabul edilir. 

	* c-basic/scanf-example.2.c: scanf example 2

	* c-basic/scanf-example.c: scanf example explained

	* c-basic/printf-examples.c: printf examples explained

	* c-basic/foo.c: Foo example : C'de iç içe fonksiyon tanımlanamaz. Her fonksiyon diğerinin dışında tanımlanmak zorundadır. 

	* c-basic/hello.c: hello world example

2024-02-14  Mert Gör  <mertgor@masscollabs.xyz>

	* c-basic/C.pdf: CSD Derneği C temel notu tekrar C-Basic klasörüne eklendi ancak hwpplayer1 dalı için eklendi. Örnekler özgün olarak yeniden yazılacak.

2024-02-04  Mert Gör  <mertgor@masscollabs.xyz>

	* c-basic/global-variable-scope.c (foo): global variable and local variable explained with two different a variable value 

2024-02-03  Mert Gör  <mertgor@masscollabs.xyz>

	* c-basic/local-variable-global-variable_scope.c (main): local and global variable values are printed

2024-02-02  Mert Gör  <mertgor@masscollabs.xyz>

	* c-basic/local-variable-scope.c: local variable and global variable explained 

2024-02-01  Mert Gör  <mertgor@masscollabs.xyz>

	* c-basic/scope.c: scope and variables explained

	* c-basic/scanf-hex.c: Scanf accepts the int variable as hex if we pass %x 

	* c-basic/scanf-float-double.c: Scanf reads float as %f and double %lf

	* c-basic/scanf-example.c: gettıng input source via scancf 

	* c-basic/scanf-example-two-variables.c: scanf example with two variables

	* c-basic/scanf-a-b-c-double.c: set a,b,c double variables, read a and b with scanf function and then pass addition of a and b to c variable and print c variable

	* c-basic/print_variables.c: print variables with different ways

	* c-basic/on-return.c: explaining return value

	* c-basic/on-return.2.c: explaining return value : "without return same result exists"

	* c-basic/on-return-void.c: if we pass void then it means function has no return value, and those functions are void functions

	* c-basic/initialization-variable.c: Swap Algorithm with initialized variables example

	* c-basic/helloworld.c: hello world example added

	* c-basic/foo.c: foo example added

